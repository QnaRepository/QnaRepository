Spring MVC 구조

1. dispatcherServlet : client의 요청주소를 받아서 주소에 맞는 Controller를 받아온다.
2. HandlerMapping : client 요청 주소에 대해서 수행해야 할 Controller를 Map형식으로 저장한다.
3. Controller : 비즈니스 로직(DAO, DB로부터 CRUD를 수행할 로직)을 수행하는 객체이다.
4. ModelAndView : Controller의 반환값(결과값)으로서 이동해야할 페이지, 이동시에 같이 가지고 갈
		  데이터들의 묶음을 뜻한다.
5. ViewResolver : Controller의 반환값(ModelAndView)에 대한 것들 중, 보여지는 페이지 대한 주소값을
		  세팅해주는 녀석이다.


Spring MVC 수행 흐름

1. 클라이언트가 '*.do'요청을 보내면 DispatcherServlet이 그 요청을 받는다.
2. DispatcherServlet은 받아온 요청을 통하여 어떤 Controller를 사용할지 선정을 한다.
   (xml파일에서 사전에 설정을 해야한다.)
3. 요청에 의하여 Controller로 이동하게 되면 Controller안에 있는 로직을 수행하게 된다.
   (주로 DB에 있는 데이터 송수신의 작업이 있음)
4. 로직을 수행하게 되면 그에 따른 결과값, 그 결과값을 보여줄 페이지에 대한 주소정보를
   ModelAndView객체에 저장해서 반환을 하게 된다.
5. ModelAndView객체는 DispatcherServlet으로 이동하게 되고, 주소값은 ViewResolver를 이용하여
   실제 이동할 상세 페이지의 주소를 얻게된다.
6. 얻어진 주소값을 통하여 해당 View페이지로 이동하게 된다.


Spring MVC 사용전 기본 세팅

1. Spring 내부에 미리 설계가 되어있는 DispatcherServlet을 가지고 온다.
   => 이 Servlet이 Controller를 가지고 오게된다.

1-1. DispatcherServlet과 연동하게 되는 xml파일이
     WEB-INF폴더 안에 있게되면 추가적으로 설정이 필요하지 않지만
     만일 다른 경로에 있게 된다면 <init-param>태그를 사용하여 설정을 해주어야 한다.

1-2. DispatcherServlet 설정시에 적게되는<servlet-name>태그 안의 이름{ex) aaa} 을 바탕으로
     xml파일의 이름을 'aaa-servlet.xml'로 지정해주어야 한다. 만일 이름을 다르게 하고 싶다면
     마찬가지로 <init-param>태그 안에 경로와 이름을 같이 설정해주어야 한다.

1-3.<param-name>contextConfigLocation</param-name> 이름 변경 불가능

2. <filter>태그를 사용하여 encoding설정을 미리 해준다.