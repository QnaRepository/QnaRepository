<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/jdbc https://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd">
	<!-- database에 연동하기 위한 소스인 dataSource 빈 객체를 먼저 생성한다. -->
	<bean id="dataSource" class = "org.apache.commons.dbcp2.BasicDataSource"
			destroy-method="close" p:driverClassName="oracle.jdbc.driver.OracleDriver"
			p:url="jdbc:oracle:thin:@localhost:1521/XEPDB1" p:username="red"
			p:password="red"/>
	
	<!-- JdbcTemplate를 사용하기 위해서 빈객체를 생성한다. dataSource객체는 위에 선언한 객체를 사용한다.-->
	<bean id="jdbcTemplate" class = "org.springframework.jdbc.core.JdbcTemplate"
			p:dataSource-ref="dataSource"/>
	<!-- namedParameterJdbcTemplate를 사용하기 위해서 빈 객체를 사용한다. -->		
	<bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg><ref bean="dataSource"/></constructor-arg>
	</bean>
	
	<!-- simpleJdbcInsert를 사용하기 위해서 빈 객체를 사용한다. -->
	<!-- simpleJdbcInsert객체의 경우 실제적으로 DB에 입력하는 기능을 담당하기 때문에 여러번 사용하게 된다. 따라서 singleton개념이 적용된
	     DI(의존성 주입)방식으로는 한번밖에 사용하지 못한다. 따라서 scope속성을 prototype으로 설정하여 필요한 만큼 객체를 생성하여 insert기능을
	         사용시에 언제나 접근이 가능하도록 하였다. -->
	<bean id="simpleJdbcInsert" class="org.springframework.jdbc.core.simple.SimpleJdbcInsert" scope="prototype">
		<constructor-arg><ref bean="dataSource"/></constructor-arg>
	</bean>

</beans>
